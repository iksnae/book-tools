name: Build Book

on:
  push:
    # Run on any branch when book content or build files change
    paths:
      - 'book/**'
      - 'resources/**'
      - 'src/scripts/**'
      - '.github/workflows/build.yml'
      - 'book.yaml'
  pull_request:
    paths:
      - 'book/**'
      - 'resources/**'
      - 'src/scripts/**'
      - '.github/workflows/build.yml'
      - 'book.yaml'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      branch:
        description: 'Branch to build'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: iksnae/book-builder:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
      
      - name: Load configuration
        id: config
        run: |
          if [ -f "book.yaml" ]; then
            echo "Using configuration from book.yaml"
            # Extract book title
            BOOK_TITLE=$(grep 'title:' book.yaml | head -n 1 | cut -d':' -f2- | sed 's/^[ \t]*//' | sed 's/\"//g')
            echo "BOOK_TITLE=$BOOK_TITLE" >> $GITHUB_ENV
            
            # Extract book author
            BOOK_AUTHOR=$(grep 'author:' book.yaml | head -n 1 | cut -d':' -f2- | sed 's/^[ \t]*//' | sed 's/\"//g')
            echo "BOOK_AUTHOR=$BOOK_AUTHOR" >> $GITHUB_ENV
          else
            echo "No book.yaml found, using default values"
            echo "BOOK_TITLE=My Book" >> $GITHUB_ENV
            echo "BOOK_AUTHOR=Author Name" >> $GITHUB_ENV
          fi
          
          # Print the configuration values for debugging
          echo "Book Title: $BOOK_TITLE"
          echo "Book Author: $BOOK_AUTHOR"
      
      - name: Prepare environment
        run: |
          mkdir -p build
          
          # Create language directories based on what exists in the book/ folder
          for lang in $(ls -1 book/ 2>/dev/null || echo "en"); do
            if [ -d "book/$lang" ] && [ "$lang" != "images" ]; then
              echo "Creating build directory for language: $lang"
              mkdir -p "build/$lang"
            fi
          done
          
          # Fix permissions on script files
          chmod +x src/scripts/*.sh

      - name: Build book
        run: |
          echo "Building book..."
          src/scripts/build.sh .
          
      - name: List build artifacts
        run: |
          echo "=== Build Directory Contents ==="
          ls -la build/
          
          # List language-specific directories
          for lang in $(ls -1 build/ 2>/dev/null); do
            if [ -d "build/$lang" ]; then
              echo "=== $lang Directory Contents ==="
              ls -la "build/$lang/" || echo "Directory may be empty"
            fi
          done
          
          # Show file sizes for main book formats
          echo "=== Book File Sizes ==="
          find build/ -name "*.pdf" -o -name "*.epub" -o -name "*.mobi" -o -name "*.html" | xargs du -h 2>/dev/null || echo "Some files may be missing"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: book-files-${{ github.sha }}
          path: |
            build/**/*.pdf
            build/**/*.epub
            build/**/*.mobi
            build/**/*.html
            build/**/*.md
          retention-days: 7
          
      - name: Build Summary
        run: |
          echo "## 📚 Book Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Title | Author | Branch |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| $BOOK_TITLE | $BOOK_AUTHOR | $(echo ${GITHUB_REF#refs/heads/}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📂 Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Format | Language | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|------|" >> $GITHUB_STEP_SUMMARY
          
          # List each output file with its size
          find build/ -name "*.pdf" -o -name "*.epub" -o -name "*.mobi" -o -name "*.html" | while read file; do
            ext="${file##*.}"
            lang=$(echo "$file" | sed -E 's#build/([^/]+)/.*#\1#')
            size=$(du -h "$file" | cut -f1)
            
            # Map extension to format name with emoji
            case "$ext" in
              pdf) format="📄 PDF" ;;
              epub) format="📱 EPUB" ;;
              mobi) format="📚 MOBI" ;;
              html) format="🌐 HTML" ;;
              *) format="📝 $ext" ;;
            esac
            
            echo "| $format | $lang | $size |" >> $GITHUB_STEP_SUMMARY
          done 